const { task, src, dest, watch } = require('gulp') // @ https://www.npmjs.com/package/gulp
const browserSync = require('browser-sync') // @ https://browsersync.io/docs/gulp
const notify = require('gulp-notify') // @ https://www.npmjs.com/package/gulp-notify
const cssnano = require('cssnano') // @ https://www.npmjs.com/package/cssnano
const postcss = require('gulp-postcss') // @ https://github.com/postcss/gulp-postcss
const rename = require('gulp-rename') // @ https://www.npmjs.com/package/gulp-rename
const autoprefixer = require('autoprefixer') // @ https://www.npmjs.com/package/autoprefixer
const sortmq = require('sort-css-media-queries') // @ https://github.com/yunusga/sort-css-media-queries
const mqpacker = require('mqpacker') // https://www.npmjs.com/package/mqpacker
const htmlmin = require('gulp-htmlmin') // @ https://github.com/jonschlinkert/gulp-htmlmin
const sass = require('gulp-sass')(require('sass')) // @ https://www.npmjs.com/package/gulp-sass || https://www.npmjs.com/package/sass

const PATH = {
  //= SCSS
  scssMainFile: '',
  scssMainFiles: '',
  scssFiles: '',

  //= CSS
  cssFolder: '',
  cssFiles: ['./implement/**/*.css', './implement/**/**/*.css'],
  cssMainFile: '',
  cssConcatFiles: [''],

  //= HTML
  htmlIndexFile: './implement/01-Fundamentals-Part-1/index.html',
  htmlFiles: ['./*.html', './implement/**/*.html', './implement/**/**/*.html'],

  //= JS
  jsFiles: ['./implement/**/*.js', './implement/**/**/*.js'],

  //= IMGS
  imgsPng: './assets/img/*.png',
  imgsJpg: './assets/img/*.{jpg,jpeg}',
}

//= ==========================================SHARP IMGS==================================================//

//= ========================================POSTCSS PLUGINS===============================================//

const PLUGINS = [
  autoprefixer({
    grid: 'autoplace',
  }),
  // grid: true | autoplace
  mqpacker({
    sort: sortmq.desktopFirst,
  }),
  // sort: sortmq.desktopFirst | sort: sortmq
]

//= ==================================SCSS==========================================//

function scssDev() {
  const pluginsExtended = PLUGINS.concat([
    cssnano({
      preset: 'default',
    }),
  ])

  return (
    src(PATH.scssMainFiles, {
      sourcemaps: false,
    })
      .pipe(
        sass({
          outputStyle: 'expanded',
        }).on('error', sass.logError)
      )
      // .pipe(postcss(PLUGINS))
      .pipe(postcss(pluginsExtended))
      // .pipe(rename('main-dev.css'))
      .pipe(
        dest(PATH.cssFolder, {
          sourcemaps: false,
        })
      )
      .pipe(
        notify({
          message: ' ---------- scss compiled!',
          sound: false,
        })
      )
      .pipe(
        browserSync.reload({
          stream: true,
        })
      )
  )
}
//= ============================================HTML MINIFY====================================================//

const optionsHtml = {
  includeAutoGeneratedTags: true,
  removeAttributeQuotes: true,
  removeComments: true,
  removeRedundantAttributes: true,
  removeScriptTypeAttributes: true,
  removeStyleLinkTypeAttributes: true,
  sortClassName: true,
  useShortDoctype: true,
  collapseWhitespace: true,
  minifyCss: true,
  minifyJS: true,
  preserveLineBreaks: false,
}

function htmlMin() {
  return (
    src(PATH.htmlMinifiedFile, {
      base: '.',
    })
      .pipe(htmlmin(optionsHtml))
      // .pipe(rename({ suffix: '.min' }))
      .pipe(
        rename({
          basename: 'index',
          extname: '.html',
        })
      )
      .pipe(
        dest('./', {
          overwrite: true,
        })
      )
  )
}

//= ==========================================ADDICIONAL=================================================//

function syncInit() {
  browserSync({
    server: {
      baseDir: './implement/',
      // index: 'index.html'
    },
    notify: false,
    // browser: "/mnt/c/Program Files/Google/Chrome/Application/chrome.exe",
    // host: devip()[1],
  })
}

async function sync() {
  browserSync.reload()
}

//= ==========================================Watch Files=================================================//

function watchFiles() {
  syncInit()
  watch(PATH.scssFiles, scssDev)
  watch(PATH.cssFiles, sync)
  watch(PATH.htmlFiles, sync)
  watch(PATH.jsFiles, sync)
}

//= ==========================================TASKS=======================================================//

task('watch', watchFiles)
task('scssDev', scssDev)
task('htmlMin', htmlMin)

// task('imgSharp', imgSharp) ---- FIND SOLUTION
